{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinay\\\\OneDrive\\\\Desktop\\\\marketconnect\\\\frontend\\\\src\\\\components\\\\common\\\\Toast.js\";\nimport React, { useState, useEffect, useRef, createContext, useContext, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiAlertCircle, FiCheckCircle, FiInfo, FiX, FiAlertTriangle } from 'react-icons/fi';\nimport './Toast.css';\n\n/**\n * @typedef {Object} ToastAction\n * @property {string} text - Display text for the action button\n * @property {() => void} onClick - Callback when the action is clicked\n * @property {string} [ariaLabel] - ARIA label for the action button\n * @property {boolean} [closeOnClick=true] - Whether to close the toast when the action is clicked\n */\n\n/**\n * @typedef {Object} ToastOptions\n * @property {string} [id] - Custom ID for the toast\n * @property {string} [title] - Optional title for the toast\n * @property {ToastAction} [action] - Optional action button configuration\n * @property {boolean} [autoClose=true] - Whether to auto-close the toast\n * @property {number} [duration=5000] - Duration in milliseconds before auto-close\n * @property {boolean} [showProgress=true] - Whether to show the progress bar\n * @property {string} [position='top-right'] - Position of the toast container\n * @property {number} [limit=5] - Maximum number of toasts to show\n * @property {string} [className] - Additional CSS class for the toast\n * @property {React.CSSProperties} [style] - Inline styles for the toast\n * @property {React.ReactNode} [icon] - Custom icon component\n * @property {boolean} [dismissible=true] - Whether the toast can be dismissed\n * @property {number} [pausedDuration=100] - Duration in ms to pause toast on hover\n */\n\n/**\n * @typedef {'info' | 'success' | 'warning' | 'error' | 'default'} ToastType\n */\n\n/**\n * @typedef {'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center'} ToastPosition\n */\n\n/**\n * @typedef {Object} ToastItem\n * @property {string} id\n * @property {string} message\n * @property {ToastType} type\n * @property {string} [title]\n * @property {ToastAction} [action]\n * @property {boolean} [autoClose]\n * @property {number} [duration]\n * @property {boolean} [showProgress]\n * @property {string} [className]\n * @property {React.CSSProperties} [style]\n * @property {React.ReactNode} [icon]\n * @property {boolean} [dismissible]\n */\n\n/**\n * @type {React.Context<import('./Toast').ToastContextType>}\n */\n\n/**\n * @typedef {Object} ToastContextType\n * @property {(message: string, options?: ToastOptions) => string} info - Show info toast\n * @property {(message: string, options?: ToastOptions) => string} success - Show success toast\n * @property {(message: string, options?: ToastOptions) => string} warning - Show warning toast\n * @property {(message: string, options?: ToastOptions) => string} error - Show error toast\n * @property {(id: string) => void} remove - Remove toast by ID\n * @property {() => void} clear - Clear all toasts\n */\n\n/**\n * Toast context for managing toast notifications\n * @type {React.Context<ToastContextType | null>}\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToastContext = /*#__PURE__*/createContext(/** @type {ToastContextType | null} */null);\n\n/**\n * Hook to access toast notification methods\n * @returns {ToastContextType}\n * @throws {Error} If used outside of a ToastProvider\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n/**\n * Toast notification component\n * @param {Object} props\n * @param {string} props.id - Unique identifier for the toast\n * @param {ToastType} [props.type='info'] - Type of toast\n * @param {string} props.message - Message to display\n * @param {string} [props.title] - Optional title\n * @param {(id: string) => void} props.onClose - Callback when toast is closed\n * @param {boolean} [props.autoClose=true] - Whether to auto-close the toast\n * @param {number} [props.duration=5000] - Duration in milliseconds before auto-close\n * @param {boolean} [props.showProgress=true] - Whether to show the progress bar\n * @param {ToastAction} [props.action] - Optional action button configuration\n * @param {string} [props.className] - Additional CSS class\n * @param {React.CSSProperties} [props.style] - Inline styles\n */\nconst Toast = ({\n  id,\n  type = 'info',\n  message,\n  title,\n  onClose,\n  autoClose = true,\n  duration = 5000,\n  showProgress = true,\n  action = null,\n  className = '',\n  style = {}\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [progress, setProgress] = useState(100);\n  const progressInterval = useRef(null);\n  const toastRef = useRef(null);\n\n  // Handle auto-close with progress bar\n  useEffect(() => {\n    if (!autoClose) return;\n    let timer;\n    const startTime = Date.now();\n    const endTime = startTime + duration;\n    let animationFrameId;\n    const updateProgress = () => {\n      const now = Date.now();\n      const remainingTime = Math.max(0, endTime - now);\n      const newProgress = remainingTime / duration * 100;\n      setProgress(newProgress);\n      if (remainingTime > 0) {\n        animationFrameId = requestAnimationFrame(updateProgress);\n      } else {\n        handleClose();\n      }\n    };\n    if (showProgress) {\n      // Start the progress animation\n      animationFrameId = requestAnimationFrame(updateProgress);\n    } else {\n      // Just use a simple timeout if progress bar is disabled\n      timer = setTimeout(handleClose, duration);\n    }\n    return () => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [autoClose, duration, showProgress]);\n\n  // Handle pause on hover\n  const [isPaused, setIsPaused] = useState(false);\n  const pauseTimeoutRef = useRef(null);\n  const progressRef = useRef(progress);\n\n  // Keep ref in sync with state\n  useEffect(() => {\n    progressRef.current = progress;\n  }, [progress]);\n  const handleMouseEnter = useCallback(() => {\n    if (!autoClose) return;\n\n    // Clear any existing timeouts\n    if (pauseTimeoutRef.current) {\n      clearTimeout(pauseTimeoutRef.current);\n      pauseTimeoutRef.current = null;\n    }\n\n    // Immediately pause the progress\n    setIsPaused(true);\n  }, [autoClose]);\n  const handleMouseLeave = useCallback(() => {\n    if (!autoClose || !isPaused) return;\n\n    // Small delay before resuming to prevent accidental hovers\n    pauseTimeoutRef.current = setTimeout(() => {\n      setIsPaused(false);\n    }, 100);\n  }, [autoClose, isPaused]);\n  const handleClose = () => {\n    setIsVisible(false);\n    setTimeout(() => onClose(id), 300); // Wait for animation to complete\n  };\n  const getIcon = () => {\n    if (icon) return icon;\n    const iconProps = {\n      size: 20,\n      'aria-hidden': true,\n      className: `toast-icon-${type}`\n    };\n    switch (type) {\n      case 'success':\n        return /*#__PURE__*/_jsxDEV(FiCheckCircle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 16\n        }, this);\n      case 'error':\n        return /*#__PURE__*/_jsxDEV(FiAlertCircle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 16\n        }, this);\n      case 'warning':\n        return /*#__PURE__*/_jsxDEV(FiAlertTriangle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 16\n        }, this);\n      case 'info':\n      default:\n        return /*#__PURE__*/_jsxDEV(FiInfo, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const toastIcon = useMemo(() => getIcon(), [type, icon]);\n\n  // Get appropriate ARIA attributes based on toast type\n  const getAriaProps = () => {\n    const baseProps = {\n      role: type === 'error' ? 'alert' : 'status',\n      'aria-live': type === 'error' ? 'assertive' : 'polite',\n      'aria-atomic': 'true',\n      'aria-label': title || `Notification: ${message}`,\n      'aria-describedby': `toast-message-${id}`,\n      'aria-hidden': !isVisible\n    };\n    if (type === 'error') {\n      return {\n        ...baseProps,\n        'aria-errormessage': `toast-message-${id}`\n      };\n    }\n    return baseProps;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: toastRef,\n    className: `toast toast-${type} ${!isVisible ? 'hidden' : ''} ${className}`,\n    style: {\n      '--toast-duration': `${duration}ms`,\n      ...style\n    },\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onFocus: handleMouseEnter,\n    onBlur: handleMouseLeave,\n    tabIndex: \"0\",\n    ...getAriaProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-icon\",\n      \"aria-hidden\": \"true\",\n      children: toastIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-content\",\n      children: [title && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"toast-title\",\n        id: `toast-title-${id}`,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-message\",\n        id: `toast-message-${id}`,\n        role: type === 'error' ? 'alert' : 'status',\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), action && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"toast-action-button\",\n          onClick: e => {\n            e.stopPropagation();\n            action.onClick();\n            if (action.closeOnClick !== false) {\n              handleClose();\n            }\n          },\n          \"aria-label\": action.ariaLabel || action.text,\n          children: action.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"toast-close-button\",\n      onClick: handleClose,\n      \"aria-label\": `Close ${title ? `${title} notification` : 'notification'}`,\n      children: /*#__PURE__*/_jsxDEV(FiX, {\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), showProgress && autoClose && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-progress\",\n      style: {\n        '--progress': `${progress}%`,\n        '--duration': `${duration}ms`,\n        '--paused': isPaused ? 'paused' : 'running'\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * ToastContainer component to manage multiple toasts\n * @param {Object} props\n * @param {ToastPosition} [props.position='top-right'] - Position of the toast container\n * @param {number} [props.limit=5] - Maximum number of toasts to show\n * @param {string} [props.className] - Additional CSS class for the container\n * @param {React.CSSProperties} [props.style] - Inline styles for the container\n */\nconst ToastContainer = ({\n  position = 'top-right',\n  limit = 5,\n  className = '',\n  style = {}\n}) => {\n  const [toasts, setToasts] = useState([]);\n\n  // Function to add a new toast\n  const addToast = (type, message, options = {}) => {\n    const id = Date.now().toString();\n\n    // Limit the number of toasts\n    setToasts(prevToasts => {\n      const updatedToasts = [...prevToasts, {\n        id,\n        type,\n        message,\n        ...options\n      }];\n      return updatedToasts.slice(-limit);\n    });\n    return id;\n  };\n\n  // Function to remove a toast by id\n  const removeToast = id => {\n    setToasts(prevToasts => prevToasts.filter(toast => toast.id !== id));\n  };\n\n  // Function to remove all toasts\n  const clearToasts = () => {\n    setToasts([]);\n  };\n\n  // Create toast methods\n  const toastMethods = {\n    info: (message, options) => addToast('info', message, options),\n    success: (message, options) => addToast('success', message, options),\n    warning: (message, options) => addToast('warning', message, options),\n    error: (message, options) => addToast('error', message, options),\n    remove: removeToast,\n    clear: clearToasts\n  };\n\n  // Expose methods to the window object for global access\n  useEffect(() => {\n    window.toast = toastMethods;\n    return () => {\n      delete window.toast;\n    };\n  }, []);\n  if (toasts.length === 0) return null;\n\n  // Add keyboard navigation for better accessibility\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape') {\n        clearToasts();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ToastContext.Provider, {\n    value: toastMethods,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `toast-container toast-${position} ${className}`,\n      style: style,\n      role: \"region\",\n      \"aria-label\": \"Notifications\",\n      \"data-testid\": \"toast-container\",\n      children: toasts.map(toast => /*#__PURE__*/_jsxDEV(Toast, {\n        id: toast.id,\n        type: toast.type,\n        title: toast.title,\n        message: toast.message,\n        onClose: removeToast,\n        autoClose: toast.autoClose !== undefined ? toast.autoClose : true,\n        duration: toast.duration || 5000,\n        showProgress: toast.showProgress !== undefined ? toast.showProgress : true,\n        action: toast.action\n      }, toast.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\nToastContainer.propTypes = {\n  position: PropTypes.oneOf(['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top-center', 'bottom-center']),\n  limit: PropTypes.number,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\nToastContainer.defaultProps = {\n  position: 'top-right',\n  limit: 5,\n  className: '',\n  style: {}\n};\nexport default ToastContainer;","map":{"version":3,"names":["React","useState","useEffect","useRef","createContext","useContext","useCallback","useMemo","PropTypes","FiAlertCircle","FiCheckCircle","FiInfo","FiX","FiAlertTriangle","jsxDEV","_jsxDEV","ToastContext","useToast","context","Error","Toast","id","type","message","title","onClose","autoClose","duration","showProgress","action","className","style","isVisible","setIsVisible","progress","setProgress","progressInterval","toastRef","timer","startTime","Date","now","endTime","animationFrameId","updateProgress","remainingTime","Math","max","newProgress","requestAnimationFrame","handleClose","setTimeout","cancelAnimationFrame","clearTimeout","isPaused","setIsPaused","pauseTimeoutRef","progressRef","current","handleMouseEnter","handleMouseLeave","getIcon","icon","iconProps","size","fileName","_jsxFileName","lineNumber","columnNumber","toastIcon","getAriaProps","baseProps","role","ref","onMouseEnter","onMouseLeave","onFocus","onBlur","tabIndex","children","onClick","e","stopPropagation","closeOnClick","ariaLabel","text","ToastContainer","position","limit","toasts","setToasts","addToast","options","toString","prevToasts","updatedToasts","slice","removeToast","filter","toast","clearToasts","toastMethods","info","success","warning","error","remove","clear","window","length","handleKeyDown","key","document","addEventListener","removeEventListener","Provider","value","map","undefined","propTypes","oneOf","number","string","object","defaultProps"],"sources":["C:/Users/vinay/OneDrive/Desktop/marketconnect/frontend/src/components/common/Toast.js"],"sourcesContent":["import React, { useState, useEffect, useRef, createContext, useContext, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiAlertCircle, FiCheckCircle, FiInfo, FiX, FiAlertTriangle } from 'react-icons/fi';\nimport './Toast.css';\n\n/**\n * @typedef {Object} ToastAction\n * @property {string} text - Display text for the action button\n * @property {() => void} onClick - Callback when the action is clicked\n * @property {string} [ariaLabel] - ARIA label for the action button\n * @property {boolean} [closeOnClick=true] - Whether to close the toast when the action is clicked\n */\n\n/**\n * @typedef {Object} ToastOptions\n * @property {string} [id] - Custom ID for the toast\n * @property {string} [title] - Optional title for the toast\n * @property {ToastAction} [action] - Optional action button configuration\n * @property {boolean} [autoClose=true] - Whether to auto-close the toast\n * @property {number} [duration=5000] - Duration in milliseconds before auto-close\n * @property {boolean} [showProgress=true] - Whether to show the progress bar\n * @property {string} [position='top-right'] - Position of the toast container\n * @property {number} [limit=5] - Maximum number of toasts to show\n * @property {string} [className] - Additional CSS class for the toast\n * @property {React.CSSProperties} [style] - Inline styles for the toast\n * @property {React.ReactNode} [icon] - Custom icon component\n * @property {boolean} [dismissible=true] - Whether the toast can be dismissed\n * @property {number} [pausedDuration=100] - Duration in ms to pause toast on hover\n */\n\n/**\n * @typedef {'info' | 'success' | 'warning' | 'error' | 'default'} ToastType\n */\n\n/**\n * @typedef {'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center'} ToastPosition\n */\n\n/**\n * @typedef {Object} ToastItem\n * @property {string} id\n * @property {string} message\n * @property {ToastType} type\n * @property {string} [title]\n * @property {ToastAction} [action]\n * @property {boolean} [autoClose]\n * @property {number} [duration]\n * @property {boolean} [showProgress]\n * @property {string} [className]\n * @property {React.CSSProperties} [style]\n * @property {React.ReactNode} [icon]\n * @property {boolean} [dismissible]\n */\n\n/**\n * @type {React.Context<import('./Toast').ToastContextType>}\n */\n\n/**\n * @typedef {Object} ToastContextType\n * @property {(message: string, options?: ToastOptions) => string} info - Show info toast\n * @property {(message: string, options?: ToastOptions) => string} success - Show success toast\n * @property {(message: string, options?: ToastOptions) => string} warning - Show warning toast\n * @property {(message: string, options?: ToastOptions) => string} error - Show error toast\n * @property {(id: string) => void} remove - Remove toast by ID\n * @property {() => void} clear - Clear all toasts\n */\n\n/**\n * Toast context for managing toast notifications\n * @type {React.Context<ToastContextType | null>}\n */\nexport const ToastContext = createContext(/** @type {ToastContextType | null} */ (null));\n\n/**\n * Hook to access toast notification methods\n * @returns {ToastContextType}\n * @throws {Error} If used outside of a ToastProvider\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n/**\n * Toast notification component\n * @param {Object} props\n * @param {string} props.id - Unique identifier for the toast\n * @param {ToastType} [props.type='info'] - Type of toast\n * @param {string} props.message - Message to display\n * @param {string} [props.title] - Optional title\n * @param {(id: string) => void} props.onClose - Callback when toast is closed\n * @param {boolean} [props.autoClose=true] - Whether to auto-close the toast\n * @param {number} [props.duration=5000] - Duration in milliseconds before auto-close\n * @param {boolean} [props.showProgress=true] - Whether to show the progress bar\n * @param {ToastAction} [props.action] - Optional action button configuration\n * @param {string} [props.className] - Additional CSS class\n * @param {React.CSSProperties} [props.style] - Inline styles\n */\nconst Toast = ({\n  id,\n  type = 'info',\n  message,\n  title,\n  onClose,\n  autoClose = true,\n  duration = 5000,\n  showProgress = true,\n  action = null,\n  className = '',\n  style = {}\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [progress, setProgress] = useState(100);\n  const progressInterval = useRef(null);\n  const toastRef = useRef(null);\n\n  // Handle auto-close with progress bar\n  useEffect(() => {\n    if (!autoClose) return;\n\n    let timer;\n    const startTime = Date.now();\n    const endTime = startTime + duration;\n    let animationFrameId;\n\n    const updateProgress = () => {\n      const now = Date.now();\n      const remainingTime = Math.max(0, endTime - now);\n      const newProgress = (remainingTime / duration) * 100;\n\n      setProgress(newProgress);\n\n      if (remainingTime > 0) {\n        animationFrameId = requestAnimationFrame(updateProgress);\n      } else {\n        handleClose();\n      }\n    };\n\n    if (showProgress) {\n      // Start the progress animation\n      animationFrameId = requestAnimationFrame(updateProgress);\n    } else {\n      // Just use a simple timeout if progress bar is disabled\n      timer = setTimeout(handleClose, duration);\n    }\n\n    return () => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [autoClose, duration, showProgress]);\n\n  // Handle pause on hover\n  const [isPaused, setIsPaused] = useState(false);\n  const pauseTimeoutRef = useRef(null);\n  const progressRef = useRef(progress);\n\n  // Keep ref in sync with state\n  useEffect(() => {\n    progressRef.current = progress;\n  }, [progress]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (!autoClose) return;\n\n    // Clear any existing timeouts\n    if (pauseTimeoutRef.current) {\n      clearTimeout(pauseTimeoutRef.current);\n      pauseTimeoutRef.current = null;\n    }\n\n    // Immediately pause the progress\n    setIsPaused(true);\n  }, [autoClose]);\n\n  const handleMouseLeave = useCallback(() => {\n    if (!autoClose || !isPaused) return;\n\n    // Small delay before resuming to prevent accidental hovers\n    pauseTimeoutRef.current = setTimeout(() => {\n      setIsPaused(false);\n    }, 100);\n  }, [autoClose, isPaused]);\n\n  const handleClose = () => {\n    setIsVisible(false);\n    setTimeout(() => onClose(id), 300); // Wait for animation to complete\n  };\n\n  const getIcon = () => {\n    if (icon) return icon;\n    \n    const iconProps = { \n      size: 20, \n      'aria-hidden': true,\n      className: `toast-icon-${type}`\n    };\n    \n    switch (type) {\n      case 'success':\n        return <FiCheckCircle {...iconProps} />;\n      case 'error':\n        return <FiAlertCircle {...iconProps} />;\n      case 'warning':\n        return <FiAlertTriangle {...iconProps} />;\n      case 'info':\n      default:\n        return <FiInfo {...iconProps} />;\n    }\n  };\n  \n  const toastIcon = useMemo(() => getIcon(), [type, icon]);\n\n  // Get appropriate ARIA attributes based on toast type\n  const getAriaProps = () => {\n    const baseProps = {\n      role: type === 'error' ? 'alert' : 'status',\n      'aria-live': type === 'error' ? 'assertive' : 'polite',\n      'aria-atomic': 'true',\n      'aria-label': title || `Notification: ${message}`,\n      'aria-describedby': `toast-message-${id}`,\n      'aria-hidden': !isVisible,\n    };\n\n    if (type === 'error') {\n      return {\n        ...baseProps,\n        'aria-errormessage': `toast-message-${id}`,\n      };\n    }\n\n    return baseProps;\n  };\n\n  return (\n    <div\n      ref={toastRef}\n      className={`toast toast-${type} ${!isVisible ? 'hidden' : ''} ${className}`}\n      style={{\n        '--toast-duration': `${duration}ms`,\n        ...style\n      }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleMouseEnter}\n      onBlur={handleMouseLeave}\n      tabIndex=\"0\"\n      {...getAriaProps()}\n    >\n      <div className=\"toast-icon\" aria-hidden=\"true\">\n        {toastIcon}\n      </div>\n      <div className=\"toast-content\">\n        {title && (\n          <h3 className=\"toast-title\" id={`toast-title-${id}`}>\n            {title}\n          </h3>\n        )}\n        <div \n          className=\"toast-message\" \n          id={`toast-message-${id}`}\n          role={type === 'error' ? 'alert' : 'status'}\n        >\n          {message}\n        </div>\n        {action && (\n          <div className=\"toast-actions\">\n            <button\n              type=\"button\"\n              className=\"toast-action-button\"\n              onClick={(e) => {\n                e.stopPropagation();\n                action.onClick();\n                if (action.closeOnClick !== false) {\n                  handleClose();\n                }\n              }}\n              aria-label={action.ariaLabel || action.text}\n            >\n              {action.text}\n            </button>\n          </div>\n        )}\n      </div>\n      <button\n        type=\"button\"\n        className=\"toast-close-button\"\n        onClick={handleClose}\n        aria-label={`Close ${title ? `${title} notification` : 'notification'}`}\n      >\n        <FiX aria-hidden=\"true\" />\n      </button>\n      {showProgress && autoClose && (\n        <div\n          className=\"toast-progress\"\n          style={{\n            '--progress': `${progress}%`,\n            '--duration': `${duration}ms`,\n            '--paused': isPaused ? 'paused' : 'running',\n          }}\n          aria-hidden=\"true\"\n        />\n      )}\n    </div>\n  );\n};\n\n/**\n * ToastContainer component to manage multiple toasts\n * @param {Object} props\n * @param {ToastPosition} [props.position='top-right'] - Position of the toast container\n * @param {number} [props.limit=5] - Maximum number of toasts to show\n * @param {string} [props.className] - Additional CSS class for the container\n * @param {React.CSSProperties} [props.style] - Inline styles for the container\n */\nconst ToastContainer = ({\n  position = 'top-right',\n  limit = 5,\n  className = '',\n  style = {}\n}) => {\n  const [toasts, setToasts] = useState([]);\n\n  // Function to add a new toast\n  const addToast = (type, message, options = {}) => {\n    const id = Date.now().toString();\n\n    // Limit the number of toasts\n    setToasts(prevToasts => {\n      const updatedToasts = [...prevToasts, { id, type, message, ...options }];\n      return updatedToasts.slice(-limit);\n    });\n\n    return id;\n  };\n\n  // Function to remove a toast by id\n  const removeToast = (id) => {\n    setToasts(prevToasts => prevToasts.filter(toast => toast.id !== id));\n  };\n\n  // Function to remove all toasts\n  const clearToasts = () => {\n    setToasts([]);\n  };\n\n  // Create toast methods\n  const toastMethods = {\n    info: (message, options) => addToast('info', message, options),\n    success: (message, options) => addToast('success', message, options),\n    warning: (message, options) => addToast('warning', message, options),\n    error: (message, options) => addToast('error', message, options),\n    remove: removeToast,\n    clear: clearToasts\n  };\n\n  // Expose methods to the window object for global access\n  useEffect(() => {\n    window.toast = toastMethods;\n\n    return () => {\n      delete window.toast;\n    };\n  }, []);\n\n  if (toasts.length === 0) return null;\n\n  // Add keyboard navigation for better accessibility\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape') {\n        clearToasts();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  return (\n    <ToastContext.Provider value={toastMethods}>\n      <div\n        className={`toast-container toast-${position} ${className}`}\n        style={style}\n        role=\"region\"\n        aria-label=\"Notifications\"\n        data-testid=\"toast-container\"\n      >\n        {toasts.map(toast => (\n          <Toast\n            key={toast.id}\n            id={toast.id}\n            type={toast.type}\n            title={toast.title}\n            message={toast.message}\n            onClose={removeToast}\n            autoClose={toast.autoClose !== undefined ? toast.autoClose : true}\n            duration={toast.duration || 5000}\n            showProgress={toast.showProgress !== undefined ? toast.showProgress : true}\n            action={toast.action}\n          />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n};\n\nToastContainer.propTypes = {\n  position: PropTypes.oneOf([\n    'top-right',\n    'top-left',\n    'bottom-right',\n    'bottom-left',\n    'top-center',\n    'bottom-center'\n  ]),\n  limit: PropTypes.number,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nToastContainer.defaultProps = {\n  position: 'top-right',\n  limit: 5,\n  className: '',\n  style: {},\n};\n\nexport default ToastContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}