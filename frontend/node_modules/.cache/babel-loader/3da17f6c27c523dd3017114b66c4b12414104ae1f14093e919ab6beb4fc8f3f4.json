{"ast":null,"code":"/**\n * Logs an error to the console and optionally to a remote logging service\n * @param {Error} error - The error to log\n * @param {Object} errorInfo - Additional error information (e.g., component stack)\n * @param {string} [componentName] - Name of the component where the error occurred\n */\nexport const logError = (error, errorInfo = {}, componentName = 'Unknown') => {\n  const errorData = {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    component: componentName,\n    location: window.location.href,\n    timestamp: new Date().toISOString(),\n    ...errorInfo\n  };\n\n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.group(`Error in ${componentName}`);\n    console.error('Error:', error);\n    if (errorInfo.componentStack) {\n      console.error('Component Stack:', errorInfo.componentStack);\n    }\n    console.groupEnd();\n  }\n\n  // In production, you would send this to your error tracking service\n  // Example: sendToErrorTrackingService(errorData);\n};\n\n/**\n * Creates a custom error handler function\n * @param {string} componentName - Name of the component for error context\n * @returns {Function} - Error handler function\n */\nexport const createErrorHandler = componentName => {\n  return (error, errorInfo) => {\n    logError(error, errorInfo, componentName);\n  };\n};","map":{"version":3,"names":["logError","error","errorInfo","componentName","errorData","name","message","stack","component","location","window","href","timestamp","Date","toISOString","process","env","NODE_ENV","console","group","componentStack","groupEnd","createErrorHandler"],"sources":["C:/Users/vinay/OneDrive/Desktop/marketconnect/frontend/src/utils/errorHandling.js"],"sourcesContent":["/**\n * Logs an error to the console and optionally to a remote logging service\n * @param {Error} error - The error to log\n * @param {Object} errorInfo - Additional error information (e.g., component stack)\n * @param {string} [componentName] - Name of the component where the error occurred\n */\nexport const logError = (error, errorInfo = {}, componentName = 'Unknown') => {\n  const errorData = {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    component: componentName,\n    location: window.location.href,\n    timestamp: new Date().toISOString(),\n    ...errorInfo,\n  };\n\n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.group(`Error in ${componentName}`);\n    console.error('Error:', error);\n    if (errorInfo.componentStack) {\n      console.error('Component Stack:', errorInfo.componentStack);\n    }\n    console.groupEnd();\n  }\n\n  // In production, you would send this to your error tracking service\n  // Example: sendToErrorTrackingService(errorData);\n};\n\n/**\n * Creates a custom error handler function\n * @param {string} componentName - Name of the component for error context\n * @returns {Function} - Error handler function\n */\nexport const createErrorHandler = (componentName) => {\n  return (error, errorInfo) => {\n    logError(error, errorInfo, componentName);\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAGA,CAACC,KAAK,EAAEC,SAAS,GAAG,CAAC,CAAC,EAAEC,aAAa,GAAG,SAAS,KAAK;EAC5E,MAAMC,SAAS,GAAG;IAChBC,IAAI,EAAEJ,KAAK,CAACI,IAAI;IAChBC,OAAO,EAAEL,KAAK,CAACK,OAAO;IACtBC,KAAK,EAAEN,KAAK,CAACM,KAAK;IAClBC,SAAS,EAAEL,aAAa;IACxBM,QAAQ,EAAEC,MAAM,CAACD,QAAQ,CAACE,IAAI;IAC9BC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnC,GAAGZ;EACL,CAAC;;EAED;EACA,IAAIa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,KAAK,CAAC,YAAYhB,aAAa,EAAE,CAAC;IAC1Ce,OAAO,CAACjB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,IAAIC,SAAS,CAACkB,cAAc,EAAE;MAC5BF,OAAO,CAACjB,KAAK,CAAC,kBAAkB,EAAEC,SAAS,CAACkB,cAAc,CAAC;IAC7D;IACAF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACpB;;EAEA;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAInB,aAAa,IAAK;EACnD,OAAO,CAACF,KAAK,EAAEC,SAAS,KAAK;IAC3BF,QAAQ,CAACC,KAAK,EAAEC,SAAS,EAAEC,aAAa,CAAC;EAC3C,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}