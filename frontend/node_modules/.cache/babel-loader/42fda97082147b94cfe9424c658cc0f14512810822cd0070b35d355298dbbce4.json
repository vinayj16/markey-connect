{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinay\\\\OneDrive\\\\Desktop\\\\marketconnect\\\\frontend\\\\src\\\\components\\\\common\\\\Toast.js\";\nimport React, { useState, useEffect, useRef, createContext, useContext, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiAlertCircle, FiCheckCircle, FiInfo, FiX, FiAlertTriangle } from 'react-icons/fi';\nimport './Toast.css';\n\n/**\n * @typedef {Object} ToastAction\n * @property {string} text - Display text for the action button\n * @property {() => void} onClick - Callback when the action is clicked\n * @property {string} [ariaLabel] - ARIA label for the action button\n * @property {boolean} [closeOnClick=true] - Whether to close the toast when the action is clicked\n */\n\n/**\n * @typedef {Object} ToastOptions\n * @property {string} [id] - Custom ID for the toast\n * @property {string} [title] - Optional title for the toast\n * @property {ToastAction} [action] - Optional action button configuration\n * @property {boolean} [autoClose=true] - Whether to auto-close the toast\n * @property {number} [duration=5000] - Duration in milliseconds before auto-close\n * @property {boolean} [showProgress=true] - Whether to show the progress bar\n * @property {string} [position='top-right'] - Position of the toast container\n * @property {number} [limit=5] - Maximum number of toasts to show\n * @property {string} [className] - Additional CSS class for the toast\n * @property {React.CSSProperties} [style] - Inline styles for the toast\n * @property {React.ReactNode} [icon] - Custom icon component\n * @property {boolean} [dismissible=true] - Whether the toast can be dismissed\n * @property {number} [pausedDuration=100] - Duration in ms to pause toast on hover\n */\n\n/**\n * @typedef {'info' | 'success' | 'warning' | 'error' | 'default'} ToastType\n */\n\n/**\n * @typedef {'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center'} ToastPosition\n */\n\n/**\n * @typedef {Object} ToastItem\n * @property {string} id\n * @property {string} message\n * @property {ToastType} type\n * @property {string} [title]\n * @property {ToastAction} [action]\n * @property {boolean} [autoClose]\n * @property {number} [duration]\n * @property {boolean} [showProgress]\n * @property {string} [className]\n * @property {React.CSSProperties} [style]\n * @property {React.ReactNode} [icon]\n * @property {boolean} [dismissible]\n */\n\n/**\n * @type {React.Context<import('./Toast').ToastContextType>}\n */\n\n/**\n * @typedef {Object} ToastContextType\n * @property {(message: string, options?: ToastOptions) => string} info - Show info toast\n * @property {(message: string, options?: ToastOptions) => string} success - Show success toast\n * @property {(message: string, options?: ToastOptions) => string} warning - Show warning toast\n * @property {(message: string, options?: ToastOptions) => string} error - Show error toast\n * @property {(id: string) => void} remove - Remove toast by ID\n * @property {() => void} clear - Clear all toasts\n */\n\n/**\n * Toast context for managing toast notifications\n * @type {React.Context<ToastContextType | null>}\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToastContext = /*#__PURE__*/createContext(/** @type {ToastContextType | null} */null);\n\n/**\n * Hook to access toast notification methods\n * @returns {ToastContextType}\n * @throws {Error} If used outside of a ToastProvider\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n/**\n * Toast notification component\n * @param {Object} props\n * @param {string} props.id - Unique identifier for the toast\n * @param {ToastType} [props.type='info'] - Type of toast\n * @param {string} props.message - Message to display\n * @param {string} [props.title] - Optional title\n * @param {(id: string) => void} props.onClose - Callback when toast is closed\n * @param {boolean} [props.autoClose=true] - Whether to auto-close the toast\n * @param {number} [props.duration=5000] - Duration in milliseconds before auto-close\n * @param {boolean} [props.showProgress=true] - Whether to show the progress bar\n * @param {ToastAction} [props.action] - Optional action button configuration\n * @param {string} [props.className] - Additional CSS class\n * @param {React.CSSProperties} [props.style] - Inline styles\n */\nconst Toast = ({\n  id,\n  type = 'info',\n  message,\n  title,\n  onClose,\n  autoClose = true,\n  duration = 5000,\n  showProgress = true,\n  action = null,\n  className = '',\n  style = {}\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [progress, setProgress] = useState(100);\n  const progressInterval = useRef(null);\n  const toastRef = useRef(null);\n\n  // Handle auto-close with progress bar\n  useEffect(() => {\n    if (!autoClose) return;\n    let timer;\n    const startTime = Date.now();\n    const endTime = startTime + duration;\n    let animationFrameId;\n    let isMounted = true;\n    const updateProgress = () => {\n      if (!isMounted) return;\n      const now = Date.now();\n      const remainingTime = Math.max(0, endTime - now);\n      const newProgress = remainingTime / duration * 100;\n      setProgress(newProgress);\n      if (remainingTime > 0) {\n        if (!isPaused) {\n          animationFrameId = requestAnimationFrame(updateProgress);\n        }\n      } else {\n        handleClose();\n      }\n    };\n    if (showProgress && !isPaused) {\n      // Start the progress animation\n      animationFrameId = requestAnimationFrame(updateProgress);\n    } else if (!showProgress) {\n      // Just use a simple timeout if progress bar is disabled\n      timer = setTimeout(handleClose, duration);\n    }\n    return () => {\n      isMounted = false;\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [autoClose, duration, showProgress, isPaused]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback(e => {\n    if (e.key === 'Escape' && dismissible !== false) {\n      handleClose();\n    } else if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      handleClose();\n    }\n  }, [dismissible]);\n\n  // Set up keyboard event listeners\n  useEffect(() => {\n    if (dismissible !== false) {\n      window.addEventListener('keydown', handleKeyDown);\n      return () => window.removeEventListener('keydown', handleKeyDown);\n    }\n  }, [dismissible, handleKeyDown]);\n\n  // Handle pause on hover\n  const [isPaused, setIsPaused] = useState(false);\n  const pauseTimeoutRef = useRef(null);\n  const progressRef = useRef(progress);\n\n  // Keep ref in sync with state\n  useEffect(() => {\n    progressRef.current = progress;\n  }, [progress]);\n  const handleMouseEnter = useCallback(() => {\n    if (!autoClose) return;\n\n    // Clear any existing timeouts\n    if (pauseTimeoutRef.current) {\n      clearTimeout(pauseTimeoutRef.current);\n      pauseTimeoutRef.current = null;\n    }\n\n    // Immediately pause the progress\n    setIsPaused(true);\n  }, [autoClose]);\n  const handleMouseLeave = useCallback(() => {\n    if (!autoClose || !isPaused) return;\n\n    // Small delay before resuming to prevent accidental hovers\n    pauseTimeoutRef.current = setTimeout(() => {\n      setIsPaused(false);\n    }, 100);\n  }, [autoClose, isPaused]);\n  const handleClose = () => {\n    setIsVisible(false);\n    setTimeout(() => onClose(id), 300); // Wait for animation to complete\n  };\n  const getIcon = () => {\n    if (icon) return icon;\n    const iconProps = {\n      size: 20,\n      'aria-hidden': true,\n      className: `toast-icon-${type}`\n    };\n    switch (type) {\n      case 'success':\n        return /*#__PURE__*/_jsxDEV(FiCheckCircle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 16\n        }, this);\n      case 'error':\n        return /*#__PURE__*/_jsxDEV(FiAlertCircle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 16\n        }, this);\n      case 'warning':\n        return /*#__PURE__*/_jsxDEV(FiAlertTriangle, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 16\n        }, this);\n      case 'info':\n      default:\n        return /*#__PURE__*/_jsxDEV(FiInfo, {\n          ...iconProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const toastIcon = useMemo(() => getIcon(), [type, icon]);\n\n  // Get appropriate ARIA attributes based on toast type\n  const getAriaProps = () => {\n    const baseProps = {\n      role: type === 'error' ? 'alert' : 'status',\n      'aria-live': type === 'error' ? 'assertive' : 'polite',\n      'aria-atomic': 'true',\n      'aria-label': title || `Notification: ${message}`,\n      'aria-describedby': `toast-message-${id}`,\n      'aria-hidden': !isVisible\n    };\n    if (type === 'error') {\n      return {\n        ...baseProps,\n        'aria-errormessage': `toast-message-${id}`\n      };\n    }\n    return baseProps;\n  };\n  const toastClassNames = ['toast', `toast-${type}`, !isVisible ? 'hidden' : '', className].filter(Boolean).join(' ');\n  const toastStyle = {\n    '--toast-duration': `${duration}ms`,\n    ...style\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: toastRef,\n    className: toastClassNames,\n    style: toastStyle,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onFocus: handleMouseEnter,\n    onBlur: handleMouseLeave,\n    tabIndex: \"0\",\n    ...getAriaProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-icon\",\n      \"aria-hidden\": \"true\",\n      children: toastIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-content\",\n      children: [title && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"toast-title\",\n        id: `toast-title-${id}`,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-message\",\n        id: `toast-message-${id}`,\n        role: type === 'error' ? 'alert' : 'status',\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), action && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"toast-action-button\",\n          onClick: e => {\n            e.stopPropagation();\n            action.onClick();\n            if (action.closeOnClick !== false) {\n              handleClose();\n            }\n          },\n          \"aria-label\": action.ariaLabel || action.text,\n          children: action.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"toast-close-button\",\n      onClick: handleClose,\n      \"aria-label\": `Close ${title ? `${title} notification` : 'notification'}`,\n      children: /*#__PURE__*/_jsxDEV(FiX, {\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), showProgress && autoClose && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toast-progress\",\n      style: {\n        '--progress': `${progress}%`,\n        '--duration': `${duration}ms`,\n        '--paused': isPaused ? 'paused' : 'running'\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * ToastContainer component to manage multiple toasts\n * @param {Object} props\n * @param {ToastPosition} [props.position='top-right'] - Position of the toast container\n * @param {number} [props.limit=5] - Maximum number of toasts to show\n * @param {string} [props.className] - Additional CSS class for the container\n * @param {React.CSSProperties} [props.style] - Inline styles for the container\n */\nconst ToastContainer = ({\n  position = 'top-right',\n  limit = 5,\n  className = '',\n  style = {}\n}) => {\n  const [toasts, setToasts] = useState([]);\n  const addToast = useCallback((type, message, options = {}) => {\n    const id = options.id || Math.random().toString(36).substr(2, 9);\n    setToasts(prevToasts => {\n      // If toast with same ID exists, update it\n      const existingToastIndex = prevToasts.findIndex(t => t.id === id);\n      if (existingToastIndex >= 0) {\n        const updatedToasts = [...prevToasts];\n        updatedToasts[existingToastIndex] = {\n          ...updatedToasts[existingToastIndex],\n          ...options,\n          message,\n          type,\n          // Preserve these values if not overridden\n          id: options.id || updatedToasts[existingToastIndex].id,\n          onClose: options.onClose || updatedToasts[existingToastIndex].onClose\n        };\n        return updatedToasts;\n      }\n\n      // Otherwise, add new toast\n      return [...prevToasts, {\n        id,\n        type,\n        message,\n        autoClose: true,\n        duration: 5000,\n        showProgress: true,\n        dismissible: true,\n        ...options\n      }].slice(-limit);\n    });\n    return id;\n  }, [limit]);\n  const removeToast = useCallback(id => {\n    setToasts(prevToasts => {\n      const toastToRemove = prevToasts.find(t => t.id === id);\n      if (toastToRemove !== null && toastToRemove !== void 0 && toastToRemove.onClose) {\n        toastToRemove.onClose();\n      }\n      return prevToasts.filter(toast => toast.id !== id);\n    });\n  }, []);\n  const clearToasts = useCallback(() => {\n    setToasts(prevToasts => {\n      // Call onClose for all toasts being removed\n      prevToasts.forEach(toast => {\n        if (toast.onClose) {\n          toast.onClose();\n        }\n      });\n      return [];\n    });\n  }, []);\n\n  // Create methods object with memoization\n  const methods = useMemo(() => ({\n    info: (message, options) => addToast('info', message, options),\n    success: (message, options) => addToast('success', message, options),\n    warning: (message, options) => addToast('warning', message, options),\n    error: (message, options) => addToast('error', message, options),\n    default: (message, options) => addToast('default', message, options),\n    remove: removeToast,\n    clear: clearToasts\n  }), [addToast, removeToast, clearToasts]);\n  return /*#__PURE__*/_jsxDEV(ToastContext.Provider, {\n    value: methods,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `toast-container toast-${position} ${className}`,\n      style: style,\n      children: toasts.map(toast => /*#__PURE__*/_jsxDEV(Toast, {\n        id: toast.id,\n        type: toast.type,\n        message: toast.message,\n        title: toast.title,\n        onClose: removeToast,\n        autoClose: toast.autoClose,\n        duration: toast.duration,\n        showProgress: toast.showProgress,\n        action: toast.action,\n        className: toast.className,\n        style: toast.style,\n        icon: toast.icon,\n        dismissible: toast.dismissible,\n        pausedDuration: toast.pausedDuration\n      }, toast.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 5\n  }, this);\n};\nToastContainer.propTypes = {\n  /** Position of the toast container */\n  position: PropTypes.oneOf(['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top-center', 'bottom-center']),\n  /** Maximum number of toasts to show at once */\n  limit: PropTypes.number,\n  /** Additional CSS class name */\n  className: PropTypes.string,\n  /** Inline styles */\n  style: PropTypes.object,\n  /** Custom toast component to render */\n  toastComponent: PropTypes.elementType\n};\nToastContainer.defaultProps = {\n  position: 'top-right',\n  limit: 5,\n  className: '',\n  style: {}\n};\nexport default ToastContainer;","map":{"version":3,"names":["React","useState","useEffect","useRef","createContext","useContext","useCallback","useMemo","PropTypes","FiAlertCircle","FiCheckCircle","FiInfo","FiX","FiAlertTriangle","jsxDEV","_jsxDEV","ToastContext","useToast","context","Error","Toast","id","type","message","title","onClose","autoClose","duration","showProgress","action","className","style","isVisible","setIsVisible","progress","setProgress","progressInterval","toastRef","timer","startTime","Date","now","endTime","animationFrameId","isMounted","updateProgress","remainingTime","Math","max","newProgress","isPaused","requestAnimationFrame","handleClose","setTimeout","cancelAnimationFrame","clearTimeout","handleKeyDown","e","key","dismissible","preventDefault","window","addEventListener","removeEventListener","setIsPaused","pauseTimeoutRef","progressRef","current","handleMouseEnter","handleMouseLeave","getIcon","icon","iconProps","size","fileName","_jsxFileName","lineNumber","columnNumber","toastIcon","getAriaProps","baseProps","role","toastClassNames","filter","Boolean","join","toastStyle","ref","onMouseEnter","onMouseLeave","onFocus","onBlur","tabIndex","children","onClick","stopPropagation","closeOnClick","ariaLabel","text","ToastContainer","position","limit","toasts","setToasts","addToast","options","random","toString","substr","prevToasts","existingToastIndex","findIndex","t","updatedToasts","slice","removeToast","toastToRemove","find","toast","clearToasts","forEach","methods","info","success","warning","error","default","remove","clear","Provider","value","map","pausedDuration","propTypes","oneOf","number","string","object","toastComponent","elementType","defaultProps"],"sources":["C:/Users/vinay/OneDrive/Desktop/marketconnect/frontend/src/components/common/Toast.js"],"sourcesContent":["import React, { useState, useEffect, useRef, createContext, useContext, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiAlertCircle, FiCheckCircle, FiInfo, FiX, FiAlertTriangle } from 'react-icons/fi';\nimport './Toast.css';\n\n/**\n * @typedef {Object} ToastAction\n * @property {string} text - Display text for the action button\n * @property {() => void} onClick - Callback when the action is clicked\n * @property {string} [ariaLabel] - ARIA label for the action button\n * @property {boolean} [closeOnClick=true] - Whether to close the toast when the action is clicked\n */\n\n/**\n * @typedef {Object} ToastOptions\n * @property {string} [id] - Custom ID for the toast\n * @property {string} [title] - Optional title for the toast\n * @property {ToastAction} [action] - Optional action button configuration\n * @property {boolean} [autoClose=true] - Whether to auto-close the toast\n * @property {number} [duration=5000] - Duration in milliseconds before auto-close\n * @property {boolean} [showProgress=true] - Whether to show the progress bar\n * @property {string} [position='top-right'] - Position of the toast container\n * @property {number} [limit=5] - Maximum number of toasts to show\n * @property {string} [className] - Additional CSS class for the toast\n * @property {React.CSSProperties} [style] - Inline styles for the toast\n * @property {React.ReactNode} [icon] - Custom icon component\n * @property {boolean} [dismissible=true] - Whether the toast can be dismissed\n * @property {number} [pausedDuration=100] - Duration in ms to pause toast on hover\n */\n\n/**\n * @typedef {'info' | 'success' | 'warning' | 'error' | 'default'} ToastType\n */\n\n/**\n * @typedef {'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center'} ToastPosition\n */\n\n/**\n * @typedef {Object} ToastItem\n * @property {string} id\n * @property {string} message\n * @property {ToastType} type\n * @property {string} [title]\n * @property {ToastAction} [action]\n * @property {boolean} [autoClose]\n * @property {number} [duration]\n * @property {boolean} [showProgress]\n * @property {string} [className]\n * @property {React.CSSProperties} [style]\n * @property {React.ReactNode} [icon]\n * @property {boolean} [dismissible]\n */\n\n/**\n * @type {React.Context<import('./Toast').ToastContextType>}\n */\n\n/**\n * @typedef {Object} ToastContextType\n * @property {(message: string, options?: ToastOptions) => string} info - Show info toast\n * @property {(message: string, options?: ToastOptions) => string} success - Show success toast\n * @property {(message: string, options?: ToastOptions) => string} warning - Show warning toast\n * @property {(message: string, options?: ToastOptions) => string} error - Show error toast\n * @property {(id: string) => void} remove - Remove toast by ID\n * @property {() => void} clear - Clear all toasts\n */\n\n/**\n * Toast context for managing toast notifications\n * @type {React.Context<ToastContextType | null>}\n */\nexport const ToastContext = createContext(/** @type {ToastContextType | null} */ (null));\n\n/**\n * Hook to access toast notification methods\n * @returns {ToastContextType}\n * @throws {Error} If used outside of a ToastProvider\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n/**\n * Toast notification component\n * @param {Object} props\n * @param {string} props.id - Unique identifier for the toast\n * @param {ToastType} [props.type='info'] - Type of toast\n * @param {string} props.message - Message to display\n * @param {string} [props.title] - Optional title\n * @param {(id: string) => void} props.onClose - Callback when toast is closed\n * @param {boolean} [props.autoClose=true] - Whether to auto-close the toast\n * @param {number} [props.duration=5000] - Duration in milliseconds before auto-close\n * @param {boolean} [props.showProgress=true] - Whether to show the progress bar\n * @param {ToastAction} [props.action] - Optional action button configuration\n * @param {string} [props.className] - Additional CSS class\n * @param {React.CSSProperties} [props.style] - Inline styles\n */\nconst Toast = ({\n  id,\n  type = 'info',\n  message,\n  title,\n  onClose,\n  autoClose = true,\n  duration = 5000,\n  showProgress = true,\n  action = null,\n  className = '',\n  style = {}\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [progress, setProgress] = useState(100);\n  const progressInterval = useRef(null);\n  const toastRef = useRef(null);\n\n  // Handle auto-close with progress bar\n  useEffect(() => {\n    if (!autoClose) return;\n\n    let timer;\n    const startTime = Date.now();\n    const endTime = startTime + duration;\n    let animationFrameId;\n    let isMounted = true;\n\n    const updateProgress = () => {\n      if (!isMounted) return;\n      \n      const now = Date.now();\n      const remainingTime = Math.max(0, endTime - now);\n      const newProgress = (remainingTime / duration) * 100;\n\n      setProgress(newProgress);\n\n      if (remainingTime > 0) {\n        if (!isPaused) {\n          animationFrameId = requestAnimationFrame(updateProgress);\n        }\n      } else {\n        handleClose();\n      }\n    };\n\n    if (showProgress && !isPaused) {\n      // Start the progress animation\n      animationFrameId = requestAnimationFrame(updateProgress);\n    } else if (!showProgress) {\n      // Just use a simple timeout if progress bar is disabled\n      timer = setTimeout(handleClose, duration);\n    }\n\n    return () => {\n      isMounted = false;\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [autoClose, duration, showProgress, isPaused]);\n  \n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Escape' && dismissible !== false) {\n      handleClose();\n    } else if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      handleClose();\n    }\n  }, [dismissible]);\n  \n  // Set up keyboard event listeners\n  useEffect(() => {\n    if (dismissible !== false) {\n      window.addEventListener('keydown', handleKeyDown);\n      return () => window.removeEventListener('keydown', handleKeyDown);\n    }\n  }, [dismissible, handleKeyDown]);\n\n  // Handle pause on hover\n  const [isPaused, setIsPaused] = useState(false);\n  const pauseTimeoutRef = useRef(null);\n  const progressRef = useRef(progress);\n\n  // Keep ref in sync with state\n  useEffect(() => {\n    progressRef.current = progress;\n  }, [progress]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (!autoClose) return;\n\n    // Clear any existing timeouts\n    if (pauseTimeoutRef.current) {\n      clearTimeout(pauseTimeoutRef.current);\n      pauseTimeoutRef.current = null;\n    }\n\n    // Immediately pause the progress\n    setIsPaused(true);\n  }, [autoClose]);\n\n  const handleMouseLeave = useCallback(() => {\n    if (!autoClose || !isPaused) return;\n\n    // Small delay before resuming to prevent accidental hovers\n    pauseTimeoutRef.current = setTimeout(() => {\n      setIsPaused(false);\n    }, 100);\n  }, [autoClose, isPaused]);\n\n  const handleClose = () => {\n    setIsVisible(false);\n    setTimeout(() => onClose(id), 300); // Wait for animation to complete\n  };\n\n  const getIcon = () => {\n    if (icon) return icon;\n    \n    const iconProps = { \n      size: 20, \n      'aria-hidden': true,\n      className: `toast-icon-${type}`\n    };\n    \n    switch (type) {\n      case 'success':\n        return <FiCheckCircle {...iconProps} />;\n      case 'error':\n        return <FiAlertCircle {...iconProps} />;\n      case 'warning':\n        return <FiAlertTriangle {...iconProps} />;\n      case 'info':\n      default:\n        return <FiInfo {...iconProps} />;\n    }\n  };\n  \n  const toastIcon = useMemo(() => getIcon(), [type, icon]);\n\n  // Get appropriate ARIA attributes based on toast type\n  const getAriaProps = () => {\n    const baseProps = {\n      role: type === 'error' ? 'alert' : 'status',\n      'aria-live': type === 'error' ? 'assertive' : 'polite',\n      'aria-atomic': 'true',\n      'aria-label': title || `Notification: ${message}`,\n      'aria-describedby': `toast-message-${id}`,\n      'aria-hidden': !isVisible,\n    };\n\n    if (type === 'error') {\n      return {\n        ...baseProps,\n        'aria-errormessage': `toast-message-${id}`,\n      };\n    }\n\n    return baseProps;\n  };\n\n  const toastClassNames = [\n    'toast',\n    `toast-${type}`,\n    !isVisible ? 'hidden' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  const toastStyle = {\n    '--toast-duration': `${duration}ms`,\n    ...style\n  };\n\n  return (\n    <div\n      ref={toastRef}\n      className={toastClassNames}\n      style={toastStyle}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleMouseEnter}\n      onBlur={handleMouseLeave}\n      tabIndex=\"0\"\n      {...getAriaProps()}\n    >\n      <div className=\"toast-icon\" aria-hidden=\"true\">\n        {toastIcon}\n      </div>\n      <div className=\"toast-content\">\n        {title && (\n          <h3 className=\"toast-title\" id={`toast-title-${id}`}>\n            {title}\n          </h3>\n        )}\n        <div \n          className=\"toast-message\" \n          id={`toast-message-${id}`}\n          role={type === 'error' ? 'alert' : 'status'}\n        >\n          {message}\n        </div>\n        {action && (\n          <div className=\"toast-actions\">\n            <button\n              type=\"button\"\n              className=\"toast-action-button\"\n              onClick={(e) => {\n                e.stopPropagation();\n                action.onClick();\n                if (action.closeOnClick !== false) {\n                  handleClose();\n                }\n              }}\n              aria-label={action.ariaLabel || action.text}\n            >\n              {action.text}\n            </button>\n          </div>\n        )}\n      </div>\n      <button\n        type=\"button\"\n        className=\"toast-close-button\"\n        onClick={handleClose}\n        aria-label={`Close ${title ? `${title} notification` : 'notification'}`}\n      >\n        <FiX aria-hidden=\"true\" />\n      </button>\n      {showProgress && autoClose && (\n        <div\n          className=\"toast-progress\"\n          style={{\n            '--progress': `${progress}%`,\n            '--duration': `${duration}ms`,\n            '--paused': isPaused ? 'paused' : 'running',\n          }}\n          aria-hidden=\"true\"\n        />\n      )}\n    </div>\n  );\n};\n\n/**\n * ToastContainer component to manage multiple toasts\n * @param {Object} props\n * @param {ToastPosition} [props.position='top-right'] - Position of the toast container\n * @param {number} [props.limit=5] - Maximum number of toasts to show\n * @param {string} [props.className] - Additional CSS class for the container\n * @param {React.CSSProperties} [props.style] - Inline styles for the container\n */\nconst ToastContainer = ({\n  position = 'top-right',\n  limit = 5,\n  className = '',\n  style = {},\n}) => {\n  const [toasts, setToasts] = useState([]);\n\n  const addToast = useCallback((type, message, options = {}) => {\n    const id = options.id || Math.random().toString(36).substr(2, 9);\n\n    setToasts((prevToasts) => {\n      // If toast with same ID exists, update it\n      const existingToastIndex = prevToasts.findIndex((t) => t.id === id);\n      if (existingToastIndex >= 0) {\n        const updatedToasts = [...prevToasts];\n        updatedToasts[existingToastIndex] = {\n          ...updatedToasts[existingToastIndex],\n          ...options,\n          message,\n          type,\n          // Preserve these values if not overridden\n          id: options.id || updatedToasts[existingToastIndex].id,\n          onClose: options.onClose || updatedToasts[existingToastIndex].onClose,\n        };\n        return updatedToasts;\n      }\n\n      // Otherwise, add new toast\n      return [\n        ...prevToasts,\n        {\n          id,\n          type,\n          message,\n          autoClose: true,\n          duration: 5000,\n          showProgress: true,\n          dismissible: true,\n          ...options,\n        },\n      ].slice(-limit);\n    });\n\n    return id;\n  }, [limit]);\n\n  const removeToast = useCallback((id) => {\n    setToasts((prevToasts) => {\n      const toastToRemove = prevToasts.find((t) => t.id === id);\n      if (toastToRemove?.onClose) {\n        toastToRemove.onClose();\n      }\n      return prevToasts.filter((toast) => toast.id !== id);\n    });\n  }, []);\n\n  const clearToasts = useCallback(() => {\n    setToasts((prevToasts) => {\n      // Call onClose for all toasts being removed\n      prevToasts.forEach((toast) => {\n        if (toast.onClose) {\n          toast.onClose();\n        }\n      });\n      return [];\n    });\n  }, []);\n\n  // Create methods object with memoization\n  const methods = useMemo(\n    () => ({\n      info: (message, options) => addToast('info', message, options),\n      success: (message, options) => addToast('success', message, options),\n      warning: (message, options) => addToast('warning', message, options),\n      error: (message, options) => addToast('error', message, options),\n      default: (message, options) => addToast('default', message, options),\n      remove: removeToast,\n      clear: clearToasts,\n    }),\n    [addToast, removeToast, clearToasts]\n  );\n\n  return (\n    <ToastContext.Provider value={methods}>\n      <div\n        className={`toast-container toast-${position} ${className}`}\n        style={style}\n      >\n        {toasts.map((toast) => (\n          <Toast\n            key={toast.id}\n            id={toast.id}\n            type={toast.type}\n            message={toast.message}\n            title={toast.title}\n            onClose={removeToast}\n            autoClose={toast.autoClose}\n            duration={toast.duration}\n            showProgress={toast.showProgress}\n            action={toast.action}\n            className={toast.className}\n            style={toast.style}\n            icon={toast.icon}\n            dismissible={toast.dismissible}\n            pausedDuration={toast.pausedDuration}\n          />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n};\n\nToastContainer.propTypes = {\n  /** Position of the toast container */\n  position: PropTypes.oneOf([\n    'top-right',\n    'top-left',\n    'bottom-right',\n    'bottom-left',\n    'top-center',\n    'bottom-center',\n  ]),\n  /** Maximum number of toasts to show at once */\n  limit: PropTypes.number,\n  /** Additional CSS class name */\n  className: PropTypes.string,\n  /** Inline styles */\n  style: PropTypes.object,\n  /** Custom toast component to render */\n  toastComponent: PropTypes.elementType,\n};\n\nToastContainer.defaultProps = {\n  position: 'top-right',\n  limit: 5,\n  className: '',\n  style: {},\n};\n\nexport default ToastContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}